.TH "le::ghs::Msg" 3 "Wed Jun 15 2022" "GHS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
le::ghs::Msg \- An aggregate type containing all the data to exchange with to/from information\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <msg\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMsg\fP (\fBagent_t\fP to, \fBagent_t\fP from, \fBmsg::NoopPayload\fP p)"
.br
.RI "A type-specific constructor for each payload type\&. "
.ti -1c
.RI "\fBMsg\fP (\fBagent_t\fP to, \fBagent_t\fP from, \fBmsg::SrchPayload\fP p)"
.br
.ti -1c
.RI "\fBMsg\fP (\fBagent_t\fP to, \fBagent_t\fP from, \fBmsg::SrchRetPayload\fP p)"
.br
.ti -1c
.RI "\fBMsg\fP (\fBagent_t\fP to, \fBagent_t\fP from, \fBmsg::InPartPayload\fP p)"
.br
.ti -1c
.RI "\fBMsg\fP (\fBagent_t\fP to, \fBagent_t\fP from, \fBmsg::AckPartPayload\fP p)"
.br
.ti -1c
.RI "\fBMsg\fP (\fBagent_t\fP to, \fBagent_t\fP from, \fBmsg::NackPartPayload\fP p)"
.br
.ti -1c
.RI "\fBMsg\fP (\fBagent_t\fP to, \fBagent_t\fP from, \fBmsg::JoinUsPayload\fP p)"
.br
.ti -1c
.RI "\fBMsg\fP (\fBagent_t\fP to, \fBagent_t\fP from, const \fBMsg\fP &other)"
.br
.ti -1c
.RI "\fBMsg\fP (\fBagent_t\fP to, \fBagent_t\fP from, \fBmsg::Type\fP t, \fBmsg::Data\fP d)"
.br
.ti -1c
.RI "\fBagent_t\fP \fBto\fP () const"
.br
.ti -1c
.RI "\fBagent_t\fP \fBfrom\fP () const"
.br
.ti -1c
.RI "\fBmsg::Type\fP \fBtype\fP () const"
.br
.ti -1c
.RI "\fBmsg::Data\fP \fBdata\fP () const"
.br
.in -1c
.SH "Detailed Description"
.PP 
An aggregate type containing all the data to exchange with to/from information\&. 

The \fBMsg\fP struct contains all the data which is passed between \fBGhsState\fP objects operating on different systems to coordinate the construction of an MST\&.
.PP
The usual way to construct a \fBMsg\fP is to construct the payload from a struct of type Msg::Data, then to call to_msg() on that payload\&.
.PP
In the example case, the field \fCother_guy\fP is used twice, but that may not be the case always\&. to_msg takes the extra step of setting the to/from fields appropriately and seperate from the payload fields\&. I specifically made this design design to defend myself from myself after messing up the data fields far too often\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "le::ghs::Msg::Msg (\fBagent_t\fP to, \fBagent_t\fP from, const \fBMsg\fP & other)"
A 'redirect' constructor that perserves type and payload, but allows new to/from fields 
.SS "le::ghs::Msg::Msg (\fBagent_t\fP to, \fBagent_t\fP from, \fBmsg::Type\fP t, \fBmsg::Data\fP d)"
A generic constructor for generic data, and known type 

.SH "Author"
.PP 
Generated automatically by Doxygen for GHS from the source code\&.
